digraph AST {
  node [shape=record];
    node [fontname=Sans];charset="UTF-8" splines=true splines=spline rankdir =LR
  node3 [label="PROGRAM |  "];
  node0 [label="CLASS_LIST | classList "];
  node29 [label="CLASS |  "];
  node4 [label="CLASS_ID | CALCULATOR "];
  node5 [label="INHERITANCE_LIST | inheritanceList "];
  node6 [label="MEMBER_LIST | memberList "];
  node12 [label="MEMBER |  "];
  node7 [label="VISIBILITY | private "];
  node11 [label="ATTRIBUTE |  "];
  node10 [label="VARIABLE |  "];
  node8 [label="VARIABLE_ID | memory "];
  node9 [label="TYPE | float "];
  node20 [label="MEMBER |  "];
  node13 [label="VISIBILITY | public "];
  node19 [label="ATTRIBUTE |  "];
  node18 [label="VARIABLE |  "];
  node14 [label="VARIABLE_ID | x "];
  node17 [label="ARRAY_TYPE |  "];
  node16 [label="ARRAY_DIMENSION | 10 "];
  node15 [label="TYPE | int "];
  node28 [label="MEMBER |  "];
  node21 [label="VISIBILITY | public "];
  node27 [label="ATTRIBUTE |  "];
  node26 [label="VARIABLE |  "];
  node22 [label="VARIABLE_ID | y "];
  node25 [label="ARRAY_TYPE |  "];
  node24 [label="ARRAY_DIMENSION | 10 "];
  node23 [label="TYPE | float "];
  node1 [label="IMPLEMENTATION_LIST | implList "];
  node2 [label="FUNCTION_LIST | functionList "];
  node47 [label="FUNCTION |  "];
  node33 [label="FUNCTION_SIGNATURE |  "];
  node30 [label="FUNCTION_ID | func1 "];
  node31 [label="PARAM_LIST | paramList "];
  node32 [label="TYPE | void "];
  node34 [label="FUNCTION_BODY |  "];
  node41 [label="LOCAL_VARIABLE |  "];
  node35 [label="VARIABLE_ID | a "];
  node40 [label="ARRAY_TYPE |  "];
  node39 [label="ARRAY_DIMENSION | 34 "];
  node38 [label="ARRAY_TYPE |  "];
  node37 [label="ARRAY_DIMENSION | 10 "];
  node36 [label="TYPE | int "];
  node46 [label="LOCAL_VARIABLE |  "];
  node42 [label="VARIABLE_ID | calcs "];
  node45 [label="ARRAY_TYPE |  "];
  node44 [label="ARRAY_DIMENSION | 10 "];
  node43 [label="TYPE | CALCULATOR "];
  node114 [label="FUNCTION |  "];
  node51 [label="FUNCTION_SIGNATURE |  "];
  node48 [label="FUNCTION_ID | main "];
  node49 [label="PARAM_LIST | paramList "];
  node50 [label="TYPE | void "];
  node52 [label="FUNCTION_BODY |  "];
  node55 [label="LOCAL_VARIABLE |  "];
  node53 [label="VARIABLE_ID | x "];
  node54 [label="TYPE | int "];
  node58 [label="LOCAL_VARIABLE |  "];
  node56 [label="VARIABLE_ID | y "];
  node57 [label="TYPE | int "];
  node61 [label="LOCAL_VARIABLE |  "];
  node59 [label="VARIABLE_ID | z "];
  node60 [label="TYPE | int "];
  node65 [label="ASSIGNMENT |  "];
  node62 [label="IDENTIFIER | x "];
  node64 [label="INTEGER | 3 "];
  node69 [label="ASSIGNMENT |  "];
  node66 [label="IDENTIFIER | y "];
  node68 [label="INTEGER | 2 "];
  node75 [label="ASSIGNMENT |  "];
  node70 [label="IDENTIFIER | z "];
  node73 [label="ADD_OP | or "];
  node72 [label="IDENTIFIER | x "];
  node74 [label="INTEGER | 0 "];
  node90 [label="IF_STATEMENT |  "];
  node79 [label="CONDITION |  "];
  node77 [label="REL_OP | \< "];
  node76 [label="IDENTIFIER | x "];
  node78 [label="IDENTIFIER | y "];
  node80 [label="BLOCK |  "];
  node84 [label="WRITE_STATEMENT |  "];
  node82 [label="ADD_OP | - "];
  node81 [label="IDENTIFIER | x "];
  node83 [label="IDENTIFIER | y "];
  node85 [label="BLOCK |  "];
  node87 [label="WRITE_STATEMENT |  "];
  node86 [label="IDENTIFIER | y "];
  node89 [label="WRITE_STATEMENT |  "];
  node88 [label="IDENTIFIER | x "];
  node93 [label="LOCAL_VARIABLE |  "];
  node91 [label="VARIABLE_ID | i "];
  node92 [label="TYPE | int "];
  node97 [label="ASSIGNMENT |  "];
  node94 [label="IDENTIFIER | i "];
  node96 [label="INTEGER | 0 "];
  node111 [label="WHILE_STATEMENT |  "];
  node101 [label="CONDITION |  "];
  node99 [label="REL_OP | \<= "];
  node98 [label="IDENTIFIER | i "];
  node100 [label="INTEGER | 10 "];
  node102 [label="BLOCK |  "];
  node104 [label="WRITE_STATEMENT |  "];
  node103 [label="IDENTIFIER | i "];
  node110 [label="ASSIGNMENT |  "];
  node105 [label="IDENTIFIER | i "];
  node108 [label="ADD_OP | + "];
  node107 [label="IDENTIFIER | i "];
  node109 [label="INTEGER | 1 "];
  node113 [label="WRITE_STATEMENT |  "];
  node112 [label="IDENTIFIER | z "];
  node3 -> node0;
  node0 -> node29;
  node29 -> node4;
  node29 -> node5;
  node29 -> node6;
  node6 -> node12;
  node12 -> node7;
  node12 -> node11;
  node11 -> node10;
  node10 -> node8;
  node10 -> node9;
  node6 -> node20;
  node20 -> node13;
  node20 -> node19;
  node19 -> node18;
  node18 -> node14;
  node18 -> node17;
  node17 -> node16;
  node17 -> node15;
  node6 -> node28;
  node28 -> node21;
  node28 -> node27;
  node27 -> node26;
  node26 -> node22;
  node26 -> node25;
  node25 -> node24;
  node25 -> node23;
  node3 -> node1;
  node3 -> node2;
  node2 -> node47;
  node47 -> node33;
  node33 -> node30;
  node33 -> node31;
  node33 -> node32;
  node47 -> node34;
  node34 -> node41;
  node41 -> node35;
  node41 -> node40;
  node40 -> node39;
  node40 -> node38;
  node38 -> node37;
  node38 -> node36;
  node34 -> node46;
  node46 -> node42;
  node46 -> node45;
  node45 -> node44;
  node45 -> node43;
  node2 -> node114;
  node114 -> node51;
  node51 -> node48;
  node51 -> node49;
  node51 -> node50;
  node114 -> node52;
  node52 -> node55;
  node55 -> node53;
  node55 -> node54;
  node52 -> node58;
  node58 -> node56;
  node58 -> node57;
  node52 -> node61;
  node61 -> node59;
  node61 -> node60;
  node52 -> node65;
  node65 -> node62;
  node65 -> node64;
  node52 -> node69;
  node69 -> node66;
  node69 -> node68;
  node52 -> node75;
  node75 -> node70;
  node75 -> node73;
  node73 -> node72;
  node73 -> node74;
  node52 -> node90;
  node90 -> node79;
  node79 -> node77;
  node77 -> node76;
  node77 -> node78;
  node90 -> node80;
  node80 -> node84;
  node84 -> node82;
  node82 -> node81;
  node82 -> node83;
  node90 -> node85;
  node85 -> node87;
  node87 -> node86;
  node85 -> node89;
  node89 -> node88;
  node52 -> node93;
  node93 -> node91;
  node93 -> node92;
  node52 -> node97;
  node97 -> node94;
  node97 -> node96;
  node52 -> node111;
  node111 -> node101;
  node101 -> node99;
  node99 -> node98;
  node99 -> node100;
  node111 -> node102;
  node102 -> node104;
  node104 -> node103;
  node102 -> node110;
  node110 -> node105;
  node110 -> node108;
  node108 -> node107;
  node108 -> node109;
  node52 -> node113;
  node113 -> node112;
}
