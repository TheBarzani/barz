[inlinecmt, // ====== struct declarations ====== //, 1]
[class, class, 2] [id, POLYNOMIAL, 2] [lcurbr, {, 2]
[public, public, 3] [function, function, 3] [id, evaluate, 3] [lpar, (, 3] [id, x, 3] [colon, :, 3] [float, float, 3] [rpar, ), 3] [arrow, =>, 3] [float, float, 3] [semi, ;, 3]
[rcurbr, }, 4] [semi, ;, 4]
[class, class, 6] [id, LINEAR, 6] [isa, isa, 6] [id, POLYNOMIAL, 6] [lcurbr, {, 6]
[private, private, 7] [attribute, attribute, 7] [id, a, 7] [colon, :, 7] [float, float, 7] [semi, ;, 7]
[private, private, 8] [attribute, attribute, 8] [id, b, 8] [colon, :, 8] [float, float, 8] [semi, ;, 8]
[public, public, 9] [function, function, 9] [id, build, 9] [lpar, (, 9] [id, A, 9] [colon, :, 9] [float, float, 9] [comma, ,, 9] [id, B, 9] [colon, :, 9] [float, float, 9] [rpar, ), 9] [arrow, =>, 9] [id, LINEAR, 9] [semi, ;, 9]
[public, public, 10] [function, function, 10] [id, evaluate, 10] [lpar, (, 10] [id, x, 10] [colon, :, 10] [float, float, 10] [rpar, ), 10] [arrow, =>, 10] [float, float, 10] [semi, ;, 10]
[rcurbr, }, 11] [semi, ;, 11]
[class, class, 13] [id, QUADRATIC, 13] [isa, isa, 13] [id, POLYNOMIAL, 13] [lcurbr, {, 13]
[private, private, 14] [attribute, attribute, 14] [id, a, 14] [colon, :, 14] [float, float, 14] [semi, ;, 14]
[private, private, 15] [attribute, attribute, 15] [id, b, 15] [colon, :, 15] [float, float, 15] [semi, ;, 15]
[private, private, 16] [attribute, attribute, 16] [id, c, 16] [colon, :, 16] [float, float, 16] [semi, ;, 16]
[public, public, 17] [function, function, 17] [id, build, 17] [lpar, (, 17] [id, A, 17] [colon, :, 17] [float, float, 17] [comma, ,, 17] [id, B, 17] [colon, :, 17] [float, float, 17] [comma, ,, 17] [id, C, 17] [colon, :, 17] [float, float, 17] [rpar, ), 17] [arrow, =>, 17] [id, QUADRATIC, 17] [semi, ;, 17]
[public, public, 18] [function, function, 18] [id, evaluate, 18] [lpar, (, 18] [id, x, 18] [colon, :, 18] [float, float, 18] [rpar, ), 18] [arrow, =>, 18] [float, float, 18] [semi, ;, 18]
[rcurbr, }, 19] [semi, ;, 19]
[inlinecmt, // ====== struct implementations ====== //, 21]
[implementation, implementation, 22] [id, POLYNOMIAL, 22] [lcurbr, {, 22]
[function, function, 23] [id, evaluate, 23] [lpar, (, 23] [id, x, 23] [colon, :, 23] [float, float, 23] [rpar, ), 23] [arrow, =>, 23] [float, float, 23]
[lcurbr, {, 24]
[return, return, 25] [lpar, (, 25] [floatlit, 0.0, 25] [rpar, ), 25] [semi, ;, 25]
[rcurbr, }, 26]
[rcurbr, }, 27]
[implementation, implementation, 29] [id, QUADRATIC, 29] [lcurbr, {, 29]
[function, function, 30] [id, evaluate, 30] [lpar, (, 30] [id, x, 30] [colon, :, 30] [float, float, 30] [rpar, ), 30] [arrow, =>, 30] [float, float, 30]
[lcurbr, {, 31]
[local, local, 32] [id, result, 32] [colon, :, 32] [float, float, 32] [semi, ;, 32]
[inlinecmt, //Using Horner's method, 33]
[id, result, 34] [assign, :=, 34] [id, a, 34] [semi, ;, 34]
[id, result, 35] [assign, :=, 35] [id, result, 35] [mult, *, 35] [id, x, 35] [plus, +, 35] [id, b, 35] [semi, ;, 35]
[id, result, 36] [assign, :=, 36] [id, result, 36] [mult, *, 36] [id, x, 36] [plus, +, 36] [id, c, 36] [semi, ;, 36]
[return, return, 37] [lpar, (, 37] [id, result, 37] [rpar, ), 37] [semi, ;, 37]
[rcurbr, }, 38]
[function, function, 39] [id, build, 39] [lpar, (, 39] [id, A, 39] [colon, :, 39] [float, float, 39] [comma, ,, 39] [id, B, 39] [colon, :, 39] [float, float, 39] [comma, ,, 39] [id, C, 39] [colon, :, 39] [float, float, 39] [rpar, ), 39] [arrow, =>, 39] [id, QUADRATIC, 39]
[lcurbr, {, 40]
[local, local, 41] [id, new_function, 41] [colon, :, 41] [id, QUADRATIC, 41] [semi, ;, 41]
[local, local, 42] [id, neww, 42] [colon, :, 42] [int, int, 42] [semi, ;, 42]
[id, new_function, 43] [dot, ., 43] [id, a, 43] [assign, :=, 43] [id, A, 43] [semi, ;, 43]
[id, new_function, 44] [dot, ., 44] [id, b, 44] [assign, :=, 44] [id, B, 44] [semi, ;, 44]
[id, new_function, 45] [dot, ., 45] [id, c, 45] [assign, :=, 45] [id, C, 45] [semi, ;, 45]
[return, return, 46] [lpar, (, 46] [id, new_function, 46] [rpar, ), 46] [semi, ;, 46]
[rcurbr, }, 47]
[rcurbr, }, 48]
[implementation, implementation, 50] [id, LINEAR, 50] [lcurbr, {, 50]
[function, function, 51] [id, build, 51] [lpar, (, 51] [id, A, 51] [colon, :, 51] [float, float, 51] [comma, ,, 51] [id, B, 51] [colon, :, 51] [float, float, 51] [rpar, ), 51] [arrow, =>, 51] [id, LINEAR, 51]
[lcurbr, {, 52]
[local, local, 53] [id, new_function, 53] [colon, :, 53] [id, LINEAR, 53] [semi, ;, 53]
[id, new_function, 54] [dot, ., 54] [id, a, 54] [assign, :=, 54] [id, A, 54] [semi, ;, 54]
[id, new_function, 55] [dot, ., 55] [id, b, 55] [assign, :=, 55] [id, B, 55] [semi, ;, 55]
[return, return, 56] [lpar, (, 56] [id, new_function, 56] [rpar, ), 56] [semi, ;, 56]
[rcurbr, }, 57]
[function, function, 58] [id, evaluate, 58] [lpar, (, 58] [id, x, 58] [colon, :, 58] [float, float, 58] [rpar, ), 58] [arrow, =>, 58] [float, float, 58]
[lcurbr, {, 59]
[local, local, 60] [id, result, 60] [colon, :, 60] [float, float, 60] [semi, ;, 60]
[id, result, 61] [assign, :=, 61] [floatlit, 0.0, 61] [semi, ;, 61]
[id, result, 62] [assign, :=, 62] [id, a, 62] [mult, *, 62] [id, x, 62] [plus, +, 62] [id, b, 62] [semi, ;, 62]
[return, return, 63] [lpar, (, 63] [id, result, 63] [rpar, ), 63] [semi, ;, 63]
[rcurbr, }, 64]
[rcurbr, }, 65]
[inlinecmt, // ====== main ====== //, 67]
[function, function, 68] [id, main, 68] [lpar, (, 68] [rpar, ), 68] [arrow, =>, 68] [void, void, 68]
[lcurbr, {, 69]
[local, local, 70] [id, f1, 70] [colon, :, 70] [id, LINEAR, 70] [semi, ;, 70]
[local, local, 71] [id, f2, 71] [colon, :, 71] [id, QUADRATIC, 71] [semi, ;, 71]
[local, local, 72] [id, counter, 72] [colon, :, 72] [int, int, 72] [semi, ;, 72]
[id, f1, 73] [assign, :=, 73] [id, f1, 73] [dot, ., 73] [id, build, 73] [lpar, (, 73] [floatlit, 2.0, 73] [comma, ,, 73] [floatlit, 3.5, 73] [rpar, ), 73] [semi, ;, 73]
[id, f2, 74] [assign, :=, 74] [id, f2, 74] [dot, ., 74] [id, build, 74] [lpar, (, 74] [minus, -, 74] [floatlit, 2.0, 74] [comma, ,, 74] [floatlit, 1.0, 74] [comma, ,, 74] [floatlit, 0.0, 74] [rpar, ), 74] [semi, ;, 74]
[id, counter, 75] [assign, :=, 75] [intlit, 1, 75] [semi, ;, 75]
[while, while, 77] [lpar, (, 77] [id, counter, 77] [leq, <=, 77] [intlit, 10, 77] [rpar, ), 77]
[lcurbr, {, 78]
[write, write, 79] [lpar, (, 79] [id, counter, 79] [rpar, ), 79] [semi, ;, 79]
[write, write, 80] [lpar, (, 80] [id, f1, 80] [dot, ., 80] [id, evaluate, 80] [lpar, (, 80] [floatlit, 1.0, 80] [rpar, ), 80] [rpar, ), 80] [semi, ;, 80]
[write, write, 81] [lpar, (, 81] [id, f2, 81] [dot, ., 81] [id, evaluate, 81] [lpar, (, 81] [floatlit, 1.0, 81] [rpar, ), 81] [rpar, ), 81] [semi, ;, 81]
[rcurbr, }, 82] [semi, ;, 82]
[rcurbr, }, 83]
[blockcmt, /*\n    classes\n    --------------------------------------\n| | no class declaration\n| | class declaration\n|X| multiple class declarations\n|X| no data member declaration\n|X| data member declaration\n|X| multiple data member declaration\n| | no member function declaration\n|X| member function declaration\n|X| multiple member function declaration\n| | no member\n|X| no inherited class\n|X| one inherited class\n| | multiple inherited classes\n|X| private member specifier\n|X| public member specifier\n\n    functions: definitions\n    --------------------------------------\n| | no main function definition\n|X| main function definition\n|X| no free function definition\n| | free function definition\n| | multiple free function definitions\n| | no member function definition\n|X| member function definition\n|X| multiple member function definitions\n| | return type: void\n| | return type: integer\n|X| return type: float\n|X| return type: id\n| | return type: array (not allowed)\n\n    functions: formal parameters\n    --------------------------------------\n| | type: integer\n|X| type: float\n| | type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    functions: calls\n    --------------------------------------\n| | free function call\n|X| member function call\n| | parameters:0\n|X| parameters:1\n|X| parameters:n\n| | array parameter - 1-dim\n| | array parameter - n-dim\n| | array parameter - with size\n| | array parameter - without size\n| | function call as statement\n|X| function call as expression factor\n| | expression as parameter\n\n    variable declaration\n    --------------------------------------\n| | type: integer\n| | type: float\n| | type: string\n|X| type: id\n| | type: 1-dim array \n| | type: n-dim array\n| | type: array (with size)\n| | type: array (without size)\n\n    function body: local variable declarations\n    --------------------------------------\n| | no local variable declarations\n|X| local variable declarations\n| | intertwined statements and variable declarations\n\n    function body: statements\n    --------------------------------------\n| | no statement\n| | 1 statement\n|X| n statements\n| | if statement\n| | if: empty then or else blocks\n| | if: 1-statement then or else blocks\n| | if: n-statements then or else blocks\n|X| while statement\n| | while: empty block\n| | while: 1-statement block\n|X| while: n-statement block\n| | read(<variable>) statement\n|X| write(<expr>) statement\n|X| return(<expr>) statement\n|X| assignment statement\n\n    variable + idnest\n    --------------------------------------\n|X| id\n|X| id.id\n|X| id.id(id)\n| | id(id).id\n| | id(id).id()\n| | id.id[id]\n| | id[id].id\n| | id[id].id[id]\n| | id.id[id][id]\n| | id[id][id].id\n| | id[id][id].id[id][id]\n| | id(id).id[id]\n| | id(id).id[id][id]\n| | expression as array index\n\n    expressions\n    --------------------------------------\n| | single variable\n| | involving addop\n| | involving multop\n| | involving relop\n|X| involving addop + multop\n| | involving multop + relop\n| | involving addop + multop + relop\n| | involving parentheses\n| | involving nested parenhteses\n| | involving not\n| | involving sign\n| | involving literals\n|X| involving variable + idnest\n|X| involving function calls\n| | involving all the above in one expression\n*/, 84]
