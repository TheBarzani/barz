[blockcmt, /*\n// ====== main ====== //\nfunction main() => void                                            \n{\n  local c: int; \n  local b: int;  \n  local brr: int[2][3][4];\n  c := 400;\n  //write (c);\n                                         \n  brr[1+1][2][3] := c;\n  b := brr[2][2][3]+3;\n  write(b);\n  write (brr[2][2][3]*2);\n}\n*/, 1]
[blockcmt, /*\nfunction main() => void  \n{\n  local x: int;                                    // 1.1\n  local y: int;                                    // 1.1\n  local z: int;                                    // 1.1\n  y := 1 + 2 * 3;\n  write(y);                                       // 3.1, 5.1\n  read(x);                                         // 3.4\n  if (x > y + 10)                                  // 3.2, 5.1   \n  then	\n    {write(x+10);}                                   // 3.4, 5.1 \n  else\n    {write(x+1);}\n  ;                                    // 3.4, 5.1\n  z := 0;                                           // 3.1\n  while(z<=10) {                                   // 3.3, 5.1\n    write(z);                                      // 3.4\n    z := z + 1;                                     // 3.1\n  }; \n}*/, 17]
[blockcmt, /*\nfunction count(a: int, b: int) => int\n{ \n  if (a==b) \n  then\n  {\n    return(b);\n  }\n  else\n  {\n     write(a);\n  };\n  return(count(a+1, b));\n}\n\nfunction main() => void\n{\n  write(count(0,10));\n}\n*/, 38]
[blockcmt, /*\nclass B {\n  public attribute x: float;\n  public attribute c: int;\n};\nclass A {\n  public attribute b: B;\n  public attribute c: float;\n  public attribute a: int;\n  public attribute d: int[5][4];\n  // public function print(a: int) => void;\n};\n/*\nimplementation A{\n  function print(a: int) => void\n  {\n    write(a);\n    write(self.a);\n  }\n}*/\n\nfunction main() => void\n{\n  local a: A;\n  a.d[1][2] := 699;\n  write(a.d[1][2] +100);\n\n  a.b.c := 100;\n  write(a.b.c);\n\n  a.a := 69;\n  write(a.a+1);\n  //a.print(96);\n  /*\n  local x: int[1];\n  x[0] := 25;\n  write(x[0]);\n  */\n}\n*/, 58]
[class, class, 99] [id, A, 99] [lcurbr, {, 99]
[public, public, 100] [attribute, attribute, 100] [id, a, 100] [colon, :, 100] [int, int, 100] [semi, ;, 100]
[public, public, 101] [function, function, 101] [id, print, 101] [lpar, (, 101] [id, a, 101] [colon, :, 101] [int, int, 101] [rpar, ), 101] [arrow, =>, 101] [void, void, 101] [semi, ;, 101]
[public, public, 102] [function, function, 102] [id, printi, 102] [lpar, (, 102] [id, a, 102] [colon, :, 102] [int, int, 102] [rpar, ), 102] [arrow, =>, 102] [int, int, 102] [semi, ;, 102]
[rcurbr, }, 103] [semi, ;, 103]
[implementation, implementation, 105] [id, A, 105] [lcurbr, {, 105]
[function, function, 106] [id, print, 106] [lpar, (, 106] [id, a, 106] [colon, :, 106] [int, int, 106] [rpar, ), 106] [arrow, =>, 106] [void, void, 106]
[lcurbr, {, 107]
[write, write, 108] [lpar, (, 108] [id, a, 108] [rpar, ), 108] [semi, ;, 108]
[write, write, 109] [lpar, (, 109] [self, self, 109] [dot, ., 109] [id, a, 109] [rpar, ), 109] [semi, ;, 109]
[rcurbr, }, 110]
[function, function, 111] [id, printi, 111] [lpar, (, 111] [id, a, 111] [colon, :, 111] [int, int, 111] [rpar, ), 111] [arrow, =>, 111] [int, int, 111]
[lcurbr, {, 112]
[return, return, 113] [lpar, (, 113] [id, a, 113] [rpar, ), 113] [semi, ;, 113]
[rcurbr, }, 114]
[rcurbr, }, 115]
[function, function, 117] [id, main, 117] [lpar, (, 117] [rpar, ), 117] [arrow, =>, 117] [void, void, 117]
[lcurbr, {, 118]
[local, local, 119] [id, a, 119] [colon, :, 119] [id, A, 119] [semi, ;, 119]
[inlinecmt, //a[1].a := 6999;, 120]
[inlinecmt, //write(a[1].a);, 121]
[id, a, 122] [dot, ., 122] [id, a, 122] [assign, :=, 122] [intlit, 111, 122] [semi, ;, 122]
[id, a, 123] [dot, ., 123] [id, print, 123] [lpar, (, 123] [intlit, 999, 123] [rpar, ), 123] [semi, ;, 123]
[rcurbr, }, 124]
