[inlinecmt, // ====== Test: Nested Control Structures and Complex Classes ======, 1]
[class, class, 2] [id, CALCULATOR, 2] [lcurbr, {, 2]
[private, private, 3] [attribute, attribute, 3] [id, memory, 3] [colon, :, 3] [float, float, 3] [semi, ;, 3]
[public, public, 4] [function, function, 4] [id, build, 4] [lpar, (, 4] [rpar, ), 4] [arrow, =>, 4] [id, CALCULATOR, 4] [semi, ;, 4]
[public, public, 5] [function, function, 5] [id, add, 5] [lpar, (, 5] [id, x, 5] [colon, :, 5] [float, float, 5] [rpar, ), 5] [arrow, =>, 5] [float, float, 5] [semi, ;, 5]
[public, public, 6] [function, function, 6] [id, subtract, 6] [lpar, (, 6] [id, x, 6] [colon, :, 6] [float, float, 6] [rpar, ), 6] [arrow, =>, 6] [float, float, 6] [semi, ;, 6]
[public, public, 7] [function, function, 7] [id, getMemory, 7] [lpar, (, 7] [rpar, ), 7] [arrow, =>, 7] [float, float, 7] [semi, ;, 7]
[rcurbr, }, 8] [semi, ;, 8]
[implementation, implementation, 10] [id, CALCULATOR, 10] [lcurbr, {, 10]
[function, function, 11] [id, build, 11] [lpar, (, 11] [rpar, ), 11] [arrow, =>, 11] [id, CALCULATOR, 11] [lcurbr, {, 11]
[local, local, 12] [id, new_calc, 12] [colon, :, 12] [id, CALCULATOR, 12] [semi, ;, 12]
[id, new_calc, 13] [dot, ., 13] [id, memory, 13] [assign, :=, 13] [floatlit, 0.0, 13] [semi, ;, 13]
[return, return, 14] [lpar, (, 14] [id, new_calc, 14] [rpar, ), 14] [semi, ;, 14]
[rcurbr, }, 15]
[function, function, 17] [id, add, 17] [lpar, (, 17] [id, x, 17] [colon, :, 17] [float, float, 17] [rpar, ), 17] [arrow, =>, 17] [float, float, 17] [lcurbr, {, 17]
[id, memory, 18] [assign, :=, 18] [id, memory, 18] [plus, +, 18] [id, x, 18] [semi, ;, 18]
[return, return, 19] [lpar, (, 19] [id, memory, 19] [rpar, ), 19] [semi, ;, 19]
[rcurbr, }, 20]
[function, function, 22] [id, subtract, 22] [lpar, (, 22] [id, x, 22] [colon, :, 22] [float, float, 22] [rpar, ), 22] [arrow, =>, 22] [float, float, 22] [lcurbr, {, 22]
[id, memory, 23] [assign, :=, 23] [id, memory, 23] [minus, -, 23] [id, x, 23] [semi, ;, 23]
[return, return, 24] [lpar, (, 24] [id, memory, 24] [rpar, ), 24] [semi, ;, 24]
[rcurbr, }, 25]
[function, function, 27] [id, getMemory, 27] [lpar, (, 27] [rpar, ), 27] [arrow, =>, 27] [float, float, 27] [lcurbr, {, 27]
[return, return, 28] [lpar, (, 28] [id, memory, 28] [rpar, ), 28] [semi, ;, 28]
[rcurbr, }, 29]
[rcurbr, }, 30]
[function, function, 32] [id, main, 32] [lpar, (, 32] [rpar, ), 32] [arrow, =>, 32] [void, void, 32] [lcurbr, {, 32]
[local, local, 33] [id, calc, 33] [colon, :, 33] [id, CALCULATOR, 33] [semi, ;, 33]
[local, local, 34] [id, result, 34] [colon, :, 34] [float, float, 34] [semi, ;, 34]
[local, local, 35] [id, i, 35] [colon, :, 35] [int, int, 35] [semi, ;, 35]
[id, calc, 37] [assign, :=, 37] [id, calc, 37] [dot, ., 37] [id, a, 37] [dot, ., 37] [id, b, 37] [dot, ., 37] [id, c, 37] [semi, ;, 37]
[id, i, 38] [assign, :=, 38] [intlit, 1, 38] [semi, ;, 38]
[while, while, 40] [lpar, (, 40] [id, i, 40] [leq, <=, 40] [intlit, 5, 40] [rpar, ), 40] [lcurbr, {, 40]
[if, if, 41] [lpar, (, 41] [id, i, 41] [geq, >=, 41] [intlit, 0, 41] [rpar, ), 41]
[then, then, 42] [lcurbr, {, 42]
[id, result, 43] [assign, :=, 43] [id, calc, 43] [dot, ., 43] [id, add, 43] [lpar, (, 43] [id, i, 43] [rpar, ), 43] [semi, ;, 43]
[rcurbr, }, 44]
[else, else, 45] [lcurbr, {, 45]
[id, result, 46] [assign, :=, 46] [id, calc, 46] [dot, ., 46] [id, subtract, 46] [lpar, (, 46] [id, i, 46] [rpar, ), 46] [semi, ;, 46]
[rcurbr, }, 47] [semi, ;, 47]
[write, write, 48] [lpar, (, 48] [id, calc, 48] [dot, ., 48] [id, getMemory, 48] [lpar, (, 48] [rpar, ), 48] [rpar, ), 48] [semi, ;, 48]
[id, i, 49] [assign, :=, 49] [id, i, 49] [plus, +, 49] [intlit, 1, 49] [semi, ;, 49]
[rcurbr, }, 50] [semi, ;, 50]
[rcurbr, }, 51]
